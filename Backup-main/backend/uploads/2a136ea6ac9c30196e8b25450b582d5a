{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 597
        },
        "id": "bp58gkHWwpTm",
        "outputId": "35a986ca-0829-4107-e2f3-10d8a1c59cea"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "LDA Projection Vector (w): [0.90878558 0.41726342]\n",
            "Projected Class 1 Data Points: [4.46966918 3.48662485 3.06936143 5.22993727 5.30419602]\n",
            "Projected Class 2 Data Points: [12.35170446  8.79082087 10.26538736 10.19112861 12.4259632 ]\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "class1 = np.array([[4, 2], [2, 4], [2, 3], [3, 6], [4, 4]])\n",
        "class2 = np.array([[9, 10], [6, 8], [9, 5], [8, 7], [10, 8]])\n",
        "\n",
        "mean1 = np.mean(class1, axis=0)\n",
        "mean2 = np.mean(class2, axis=0)\n",
        "S_w = np.cov(class1.T) + np.cov(class2.T)\n",
        "\n",
        "S_w_inv = np.linalg.inv(S_w)\n",
        "w = S_w_inv @ (mean2 - mean1)\n",
        "\n",
        "w = w / np.linalg.norm(w)\n",
        "\n",
        "projected_class1 = class1 @ w\n",
        "projected_class2 = class2 @ w\n",
        "\n",
        "print(\"LDA Projection Vector (w):\", w)\n",
        "print(\"Projected Class 1 Data Points:\", projected_class1)\n",
        "print(\"Projected Class 2 Data Points:\", projected_class2)\n",
        "\n",
        "plt.figure(figsize=(8,6))\n",
        "plt.scatter(class1[:,0], class1[:,1], label='Class 1', color='blue')\n",
        "plt.scatter(class2[:,0], class2[:,1], label='Class 2', color='red')\n",
        "origin = np.mean(np.vstack((class1, class2)), axis=0)\n",
        "plt.quiver(*origin, *w, scale=3, color='green', label='LDA Direction')\n",
        "\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.axis('equal')\n",
        "plt.title('LDA Projection Direction')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G-7LAIfLwvp4",
        "outputId": "f9fc926c-a5ea-41cb-8cb0-141178b6d7a5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Covariance Matrix:\n",
            " [[0.938  0.8405]\n",
            " [0.8405 0.853 ]]\n",
            "\n",
            "Eigenvalues:\n",
            " [1.73707382 0.05392618]\n",
            "\n",
            "Eigenvectors:\n",
            " [[ 0.72474155 -0.68902082]\n",
            " [ 0.68902082  0.72474155]]\n",
            "\n",
            "Projected Data onto First Principal Component:\n",
            " [ 0.44362444 -2.17719404  0.57071239 -0.12902465  1.29188186]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "X = np.array([\n",
        "    [2.5, 2.4],\n",
        "    [0.5, 0.7],\n",
        "    [2.2, 2.9],\n",
        "    [1.9, 2.2],\n",
        "    [3.1, 3.0]\n",
        "])\n",
        "X_meaned = X - np.mean(X, axis=0)\n",
        "cov_matrix = np.cov(X_meaned, rowvar=False)\n",
        "eigenvalues, eigenvectors = np.linalg.eig(cov_matrix)\n",
        "\n",
        "sorted_indices = np.argsort(eigenvalues)[::-1]\n",
        "eigenvalues = eigenvalues[sorted_indices]\n",
        "eigenvectors = eigenvectors[:, sorted_indices]\n",
        "\n",
        "pc1 = eigenvectors[:, 0]\n",
        "projected_data = X_meaned @ pc1\n",
        "\n",
        "\n",
        "print(\"Covariance Matrix:\\n\", cov_matrix)\n",
        "print(\"\\nEigenvalues:\\n\", eigenvalues)\n",
        "print(\"\\nEigenvectors:\\n\", eigenvectors)\n",
        "print(\"\\nProjected Data onto First Principal Component:\\n\", projected_data)\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
